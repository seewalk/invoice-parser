'use server';

import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { InvoiceData } from '../types/invoice';

interface PDFGenerationResult {
  success: boolean;
  pdfBase64?: string;
  fileName?: string;
  error?: string;
}

/**
 * Server Action: Generate PDF invoice from invoice data
 * 
 * This keeps the heavy jsPDF library (100KB+) on the server,
 * reducing client bundle size significantly.
 * 
 * @param invoiceData - The invoice data to generate PDF from
 * @returns Base64 encoded PDF for download
 */
export async function generatePDFInvoice(
  invoiceData: InvoiceData,
  includeWatermark: boolean = true
): Promise<PDFGenerationResult> {
  try {
    console.log('[PDF Generation] Starting server-side PDF generation');
    
    // Create new PDF document
    const doc = new jsPDF();
    
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    
    // Add watermark if enabled (same as template generator)
    if (includeWatermark) {
      doc.setFontSize(60);
      doc.setTextColor(240, 240, 240);
      doc.text('SAMPLE', pageWidth / 2, pageHeight / 2, {
        align: 'center',
        angle: 45,
      });
    }
    
    // Reset text color
    doc.setTextColor(0, 0, 0);
    
    // Company/Logo Header
    doc.setFillColor(37, 99, 235); // Primary blue
    doc.rect(0, 0, 210, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(28);
    doc.setFont('helvetica', 'bold');
    doc.text('INVOICE', 15, 25);
    
    // Invoice metadata in header
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Invoice #: ${invoiceData.invoiceNumber}`, 150, 15, { align: 'right' });
    doc.text(`Date: ${invoiceData.date}`, 150, 22, { align: 'right' });
    doc.text(`Due Date: ${invoiceData.dueDate}`, 150, 29, { align: 'right' });
    
    // Supplier Information
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('From:', 15, 55);
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(invoiceData.supplier, 15, 62);
    
    // Bill To section
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Bill To:', 15, 75);
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text('Your Company Name', 15, 82);
    
    // Line Items Table
    const tableData = invoiceData.lineItems.map(item => [
      item.description,
      item.category,
      item.quantity.toString(),
      `${invoiceData.currency} ${item.unitPrice.toFixed(2)}`,
      `${invoiceData.currency} ${item.totalPrice.toFixed(2)}`
    ]);
    
    autoTable(doc, {
      startY: 95,
      head: [['Description', 'Category', 'Qty', 'Unit Price', 'Total']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [37, 99, 235],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
      },
      columnStyles: {
        0: { cellWidth: 60 },
        1: { cellWidth: 35 },
        2: { cellWidth: 20, halign: 'center' },
        3: { cellWidth: 35, halign: 'right' },
        4: { cellWidth: 35, halign: 'right' },
      },
      margin: { left: 15, right: 15 },
    });
    
    // Get the final Y position after the table
    const finalY = (doc as any).lastAutoTable.finalY || 95;
    
    // Totals Section
    const totalsStartY = finalY + 10;
    const rightAlign = 195;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    // Subtotal
    doc.text('Subtotal:', rightAlign - 50, totalsStartY, { align: 'right' });
    doc.text(`${invoiceData.currency} ${invoiceData.subtotal.toFixed(2)}`, rightAlign, totalsStartY, { align: 'right' });
    
    // Tax
    doc.text('Tax:', rightAlign - 50, totalsStartY + 7, { align: 'right' });
    doc.text(`${invoiceData.currency} ${invoiceData.taxAmount.toFixed(2)}`, rightAlign, totalsStartY + 7, { align: 'right' });
    
    // Total (Bold and larger)
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(37, 99, 235);
    doc.text('TOTAL:', rightAlign - 50, totalsStartY + 17, { align: 'right' });
    doc.text(`${invoiceData.currency} ${invoiceData.totalAmount.toFixed(2)}`, rightAlign, totalsStartY + 17, { align: 'right' });
    
    // Confidence Score Badge
    doc.setTextColor(100, 100, 100);
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text(`AI Confidence: ${(invoiceData.confidence * 100).toFixed(1)}%`, 15, totalsStartY + 20);
    
    // Footer
    doc.setTextColor(150, 150, 150);
    doc.setFontSize(8);
    doc.text('Generated by Elektroluma - AI-Powered Invoice Processing', 105, 285, { align: 'center' });
    
    // Convert PDF to base64 for client-side download
    const pdfOutput = doc.output('datauristring');
    const pdfBase64 = pdfOutput.split(',')[1]; // Remove data URI prefix
    
    const fileName = `invoice-${invoiceData.invoiceNumber}.pdf`;
    
    console.log('[PDF Generation] Successfully generated PDF:', fileName);
    
    return {
      success: true,
      pdfBase64,
      fileName,
    };
  } catch (error) {
    console.error('[PDF Generation] Error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate PDF'
    };
  }
}

/**
 * Server Action: Generate PDF invoice without watermark (for premium users)
 * 
 * @param invoiceData - The invoice data to generate PDF from
 * @returns Base64 encoded PDF for download
 */
export async function generateCleanPDFInvoice(
  invoiceData: InvoiceData
): Promise<PDFGenerationResult> {
  return generatePDFInvoice(invoiceData, false);
}